// This is your Prisma schema file for TrustDoc
// Documentation: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// =============================================================================
// Enums
// =============================================================================

/// Type of contract analyzed
enum ContractType {
  CGU          // Terms of Service / Conditions Générales d'Utilisation
  FREELANCE    // Freelance Contract
  EMPLOI       // Employment Contract
  NDA          // Non-Disclosure Agreement
  DEVIS        // Quote / Estimate
  PARTENARIAT  // Partnership Agreement
  AUTRE        // Other
}

// =============================================================================
// User Model
// =============================================================================

/// User account with credit system and NextAuth integration
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime? // NextAuth: email verification timestamp
  name          String?   // NextAuth: user display name
  image         String?   // NextAuth: profile picture URL
  credits       Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  analyses Analysis[]
  accounts Account[] // NextAuth: OAuth accounts
  sessions Session[] // NextAuth: active sessions

  @@index([email])
  @@map("users")
}

// =============================================================================
// Analysis Model
// =============================================================================

/// Document analysis result
model Analysis {
  id       String       @id @default(cuid())
  userId   String
  filename String
  type     ContractType @default(AUTRE)

  // Analysis metadata
  textLength Int @default(0)

  // Analysis results
  summary      String? @db.Text
  riskScore    Int     @default(0) // 0-100
  redFlags     Json?   // Array of red flags
  clauses      Json?   // Array of clauses
  aiResponse   Json?   // Full AI response for debugging

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([type])
  @@index([deletedAt])
  @@map("analyses")
}

// =============================================================================
// NextAuth Models
// =============================================================================

/// OAuth account linked to a user (Google, etc.)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

/// Active user session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

/// Email verification token (magic links)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// =============================================================================
// Guest Quota Model
// =============================================================================

/// Guest user quota tracking (3 free analyses per browser)
model GuestQuota {
  id        String   @id @default(uuid()) // UUID v4 guest identifier
  used      Int      @default(0) // Number of analyses consumed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime // Cookie expiration (30 days from creation)

  @@index([id])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("guest_quotas")
}
